#! /usr/bin/env bash
#
#   Copyright (c) 2015 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
MULLE_SDE_VERSION=0.3.2

MULLE_EXECUTABLE_FUNCTIONS_MIN="3.9"
MULLE_EXECUTABLE_FUNCTIONS_MAX="4"


usage()
{
    cat <<EOF >&2
Usage:
   ${MULLE_EXECUTABLE} [options] [path|url] [mulle-bootstrap-flags]

   Create a virtual environment for project in DIRECTORY.
   If the DIRECTORY at path does not exist and the path looks like an url,
   ${MULLE_EXECUTABLE} will attempt to git clone the project from that url.

Options:
   -m        : set CPPFLAGS and LDFLAGS in environment for make
   -c <cmd>  : shell command to execute instead of interactive shell
   -d <dir>  : specify different DIRECTORY, than the one taken from the url
   -ni       : don't inherit PATH, LD_LIBRARY_PATH and related environment
EOF
  exit 1
}


run_shell()
{
   #
   # could pimp this up with CPPFLAGS and LDFLAGS too
   # but do I want this ?
   #
   local options

   options="run"
   if [ "${OPTION_MAKE_FLAGS}" = "YES" ]
   then
      options="${options} make"
   fi

   local pathoptions

   if [ "${OPTION_INHERIT}" = "NO" ]
   then
      pathoptions="-ni"
   fi

   local envname

   envname="`basename -- "${ENVDIRECTORY}"`"

   local path
   local name
   local env_string
   local cmd_string
   local cmd_options

   if [ -d ".bootstrap" -o -d ".bootstrap.local" ]
   then
#      path="`mulle-bootstrap master-path`" || return 1

      env_string="`mulle-bootstrap paths ${pathoptions} -m -1 -q "'" ${options}`" || return 1
   else
      :
#      path="`pwd -P`"
   fi

#   name="`basename -- "${path}"`"
   cmd_string="${SHELL:-/usr/bin/env bash}"

   local prompt_string
   local initfile

   #
   # because some environment strings like
   # DYLD_LIBRARY_PATH are stripped off by dyld (I guess)
   # put everything in an init file if possible
   #
   case "${cmd_string}" in
      *bash|*dash)
         initfile="`mktemp .environment.XXXXXXX`" || exit 1
         echo "${env_string}" > "${initfile}"
         echo "[ -f \"${ENVDIRECTORY}/.mulle-sde-environment.sh\" ] && \
. \"${ENVDIRECTORY}/.mulle-sde-environment.sh\"" >> "${initfile}"
         if [ "${OPTION_KEEP_TMP}" = "NO" ]
         then
            echo "( sleep 1 ; rm \"${initfile}\" 2> /dev/null ) &" >> "${initfile}"
         fi
         cmd_options="--rcfile '${initfile}'"
      ;;
   esac

   case "${cmd_string}" in
      *bash|*dash)
         case "${PS1}" in
            *\\h[*)
               prompt_string="PS1='${PS1}'"
            ;;

            *\\h*)
               prompt_string="PS1='$(sed "s/\\\\h/\\\\h\\[${envname}\\]/" <<< "${PS1}")"
            ;;

            *)
               prompt_string="PS1='\u@\h[${envname}] \W$ '"
            ;;
         esac
      ;;
   esac

   eval_exekutor "MULLE_SDE_VIRTUAL_ROOT='${ENVDIRECTORY}'" \
                 "${env_string}" \
                 "${prompt_string}" \
                  "'${cmd_string}'" \
                  "${cmd_options}" \
                  "$@"

  if [ "${OPTION_KEEP_TMP}" = "NO" ] && [ -f "${initfile}" ]
  then
      rm "${initfile}"
  fi
}


main()
{
   local OPTION_MAKE_FLAGS="NO"
   local OPTION_DIRECTORY
   local OPTION_INHERIT="YES"
   local OPTION_BOOTSTRAP="YES"
   local OPTION_SHELL_COMMAND
   local OPTION_KEEP_TMP="NO"

   while [ $# -ne 0 ]
   do
      if core_technical_flags "$1"
      then
         shift
         continue
      fi

      case "$1" in
         -h|--help)
            usage
         ;;

         -c)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_SHELL_COMMAND="$1"
         ;;

         -m|--make)
            OPTION_MAKE_FLAGS="YES"
         ;;

         -d|--DIRECTORY)
            [ $# -eq 1 ] && fail "missing argument to $1"
            shift

            OPTION_DIRECTORY="$1"
         ;;

         -ni|--no-inherit)
            OPTION_INHERIT="NO"
         ;;

         -nb|--no-bootstrap)
            OPTION_BOOTSTRAP="NO"
         ;;

         --keep-tmp)
            OPTION_KEEP_TMP="YES"
         ;;

         # argument gitflags
         -*)
            fail "unknown option $1"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   core_setup_trace "${MULLE_TRACE}"
   export MULLE_TRACE

   #
   # lets do this for now
   #
   if [ ! -z "${MULLE_SDE_VIRTUAL_ROOT}" ]
   then
      fail "You are already in the mulle-bootstrap virtual environment \"${MULLE_SDE_VIRTUAL_ROOT}\". Environments don't stack."
   fi

   set -x
   local arg
   local url

   # CALLDIRECTORY is where we are called from
   local CALLDIRECTORY
   # DIRECTORY is where we are supposed to execute
   local DIRECTORY
   # ENVDIRECTORY is where the mulle-sde-environment.sh is
   local ENVDIRECTORY

   CALLDIRECTORY="`pwd -P`"

   arg="$1"
   [ $# -ne 0 ] && shift

   if [ ! -z "${OPTION_DIRECTORY}" ]
   then
      DIRECTORY="${OPTION_DIRECTORY}"
   else
      if [ -z "${arg}" ]
      then
         DIRECTORY="${CALLDIRECTORY}"

         local found

         found="NO"

         ENVDIRECTORY="${DIRECTORY}"
         # look for .mulle-sde-environment.sh going up to root, if we
         # find one, we latch onto it
         while [ "${ENVDIRECTORY}" != "/" ]
         do
            if [ -f "${ENVDIRECTORY}/.mulle-sde-environment.sh" ]
            then
               found="YES"
               break
            fi
            ENVDIRECTORY="`dirname -- "${ENVDIRECTORY}"`"
         done

         if [ "${found}" = "NO" ]
         then
            ENVDIRECTORY="${CALLDIRECTORY}"
         fi
      else
         if [ -d "${arg}" ]
         then
            DIRECTORY="$arg"
         else
            DIRECTORY="`basename -- "${arg}"`" || return 1
         fi
      fi
   fi

   ENVDIRECTORY="${ENVDIRECTORY:-${DIRECTORY}}"

   if [ ! -d "${DIRECTORY}/.bootstrap" -a ! -d "${DIRECTORY}/.bootstrap.local" ]
   then
      if [ -z "`command -v git`" ]
      then
         fail "git not installed, can't clone stuff for you"
      fi

      case "${arg}" in
         "")
            url=""
         ;;

         *:*)
            url="${arg}"
         ;;

         *)
            url="https://github.com/${arg}"
         ;;
      esac

      if [ ! -z "${url}" ]
      then
         log_verbose "Cloning from URL \"${arg}\" into \"${DIRECTORY}\"..."
         git clone "${url}" "${DIRECTORY}" || return 1
      else
         if [ ! -d "${DIRECTORY}" ]
         then
            fail "${DIRECTORY} does not exist"
         fi
      fi
   fi

   if [ "${OPTION_BOOTSTRAP}" = "YES" ] && \
      [ -d "${DIRECTORY}/.bootstrap" -o  -d "${DIRECTORY}/.bootstrap.local" ] && \
      [ ! -d "${DIRECTORY}/.bootstrap.auto" ]
   then
      local exepath

      # weird, but if there is a mulle-bootstrap folder in the top DIRECTORY
      # you can't run mulle-bootstrap via bash so resolve before
      exepath="`command -v mulle-bootstrap`"
      log_fluff "Running mulle-bootstrap in \"${DIRECTORY}\"..."
      ( cd "${DIRECTORY}" ; run_shell "${exepath}" "$@" )
   fi

   log_fluff "Run shell in \"${DIRECTORY}\"..."

   if [ -z "${OPTION_SHELL_COMMAND}" ]
   then
      ( cd "${DIRECTORY}" ; run_shell )
   else
      ( cd "${DIRECTORY}" ; run_shell -c "${OPTION_SHELL_COMMAND}" )
   fi

   return $?
}



_init()
{
   libexecpath="`mulle-bootstrap library-path 2> /dev/null`"
   if [ -z "${libexecpath}" ]
   then
      echo "Fatal Error: Could not find mulle-bootstrap library for ${MULLE_EXECUTABLE}" >&2
      exit 1
   fi

   . ${libexecpath}/mulle-bootstrap-logging.sh || internal_fail "mulle-bootstrap-logging.sh not found"
   . ${libexecpath}/mulle-bootstrap-functions.sh || internal_fail "mulle-bootstrap-functions.sh not found"
   . ${libexecpath}/mulle-bootstrap-core-options.sh || internal_fail "mulle-bootstrap-core-options.sh not found"
}


MULLE_EXECUTABLE="`basename -- "$0"`"
MULLE_ARGUMENTS="$@"
MULLE_EXECUTABLE_FAIL_PREFIX="${MULLE_EXECUTABLE}"
MULLE_EXECUTABLE_PID="$$"


set -o pipefail

_init "$@" # needs params


#
# combine all coverage files into one and sort -u it
#

main "$@"

