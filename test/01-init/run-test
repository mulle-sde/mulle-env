#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_env()
{
   log_fluff "####################################"
   log_fluff ${MULLE_ENV} ${MULLE_ENV_FLAGS} "$@"
   log_fluff "####################################"

   exekutor ${MULLE_ENV} ${MULLE_ENV_FLAGS} "$@"
}


main()
{
   MULLE_ENV_FLAGS="$@"

   _options_mini_main "$@" && set -x

   local directory

   r_make_tmp_directory || exit 1
   directory="${RVAL:-/tmp/exekutor}"

   cd "${directory}" || exit 1

   run_mulle_env -s -DBAR="bar" init --style none/tight

   local value

   if value="`run_mulle_env environment --me get FOO`"
   then
      fail "Positive return value for failed get"
   fi

   if [ ! -z "${value}" ]
   then
      fail "Non empty return value for failed get"
   fi

   log_verbose "----- #1 PASSED -----"

#   value="`run_mulle_env environment --global get BAR`"
#   if [ ! -z "${value}" ]
#   then
#      fail "Initial value found in wrong scope"
#   fi
#
#   log_verbose "----- #2 PASSED -----"
#
#   value="`run_mulle_env environment --scope plugin get BAR`"
#   if [ "${value}" != "bar" ]
#   then
#      fail "Initial value not found"
#   fi
#
#   log_verbose "----- #3 PASSED -----"


   log_info "----- ALL PASSED -----"

   cd ..

   rmdir_safer "${directory}"
}



init()
{
   MULLE_ENV="${MULLE_ENV:-${PWD}/../../mulle-env}"
}



init "$@"
main "$@"

