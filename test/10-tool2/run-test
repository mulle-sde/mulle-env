#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_env()
{
   log_fluff "####################################"
   log_fluff ${MULLE_ENV} ${MULLE_ENV_FLAGS} "$@"
   log_fluff "####################################"

   exekutor ${MULLE_ENV} ${MULLE_ENV_FLAGS} "$@"
}


main()
{
   MULLE_ENV_FLAGS="$@"

   _options_mini_main "$@" && set -x

   local directory
   local vardir

   r_make_tmp_directory || exit 1
   directory="${RVAL:-/tmp/exekutor}"

   exekutor cd "${directory}" || exit 1

   run_mulle_env -s init --style minimal/tight
   run_mulle_env tool compile
   run_mulle_env tool link

   value="`run_mulle_env -s tool list --no-color | grep -E '^mudo;'`"
   [ "${value}" != 'mudo;required' ] && fail "#1: not mudo;required is wrong here ($value)"

   log_verbose "----- #1 PASSED -----"

   value="`run_mulle_env -s tool get mudo`"
   [ "${value}" != 'mudo' ] && fail "#2: no mudo after get is wrong ($value)"

   log_verbose "----- #2 PASSED -----"

   if run_mulle_env tool add mudo
   then
      fail "#3: Unexpected success of mudo add (should be 4)"
   fi

   log_verbose "----- #3 PASSED -----"

   value="`run_mulle_env -s tool list --no-color | grep -E awk`"
   [ ! -z "${value}" ] && fail "#4: awk is wrong here"

   if ! run_mulle_env tool add awk
   then
      fail "#4: Unexpected add failure"
   fi

   value="`run_mulle_env -s tool list --no-color | grep -E awk`"
   [ "${value}" != "awk" ] && fail "#2: Not awk is wrong here"

   log_verbose "----- #4 PASSED -----"

   if ! run_mulle_env tool --os foobar add grep
   then
      fail "#5: Unexpected add failure"
   fi

   value="`run_mulle_env -s tool list --no-color os`"
   [ "${value}" = "foobar"  ] && fail "#5: foobar not known ($value)"

   value="`run_mulle_env -s tool get grep`"
   [ ! -z "${value}"  ] && fail "#5: grep only available in foobar ($value)"

   value="`run_mulle_env -s tool --os foobar get grep`"
   [ "${value}" != "grep" ] && fail "#5: grep not available in foobar ($value)"

   run_mulle_env -s tool compile

   vardir="`run_mulle_env mulle-tool-env env | sed -n -e 's/^MULLE_ENV_VAR_DIR=.\(.*\).$/\1/p'`"

   result="`cat "${vardir}/tool"`"
   expect="awk
bash
cat;required
chgrp;required
chmod;required
chown;required
cp;required
date;required
dd
df
dmesg
echo;required
false;required
hostname
kill;required
ln;required
login
ls;required
mkdir;required
mknod
more;required
mount
mudo;required
mv;required
ps
pwd;required
readlink;required
rmdir;required
rm;required
sed;required
sh;required
stty
su
sync
true;required
tty
umount
uname;required
zsh"
   [ "${expect}" != "${result}" ] && fail "#5: result \"${result}\" did not match \"${expect}\""

   log_verbose "----- #5 PASSED -----"

   [ -x "${vardir}/bin/grep" ] && fail "#6: grep already in bin"

   if ! run_mulle_env -s tool link
   then
      fail fail "#6: link failed unexpectedly"
   fi

   [ ! -x "${vardir}/bin/awk" ] && fail "#6: awk not in bin"
   [ -x "${vardir}/bin/grep" ] && fail "#6: grep in bin, but should not be"

   log_verbose "----- #7 PASSED -----"

   if [ -z "`command -v ishouldnotexist`" ]
   then
      if ! run_mulle_env tool --current add --required ishouldnotexist
      then
         fail "#7: Unexpected add failure"
      fi

      if run_mulle_env -s tool link --compile-if-needed
      then
         fail fail "#7: link succeeded unexpectedly"
      fi
      log_info "Failed as expected"

      if ! run_mulle_env tool --current remove ishouldnotexist
      then
         fail "#7: Unexpected remove failure"
      fi

      if ! run_mulle_env tool --current add --optional ishouldnotexist
      then
         fail "#7: Unexpected add failure"
      fi

      if ! run_mulle_env -s tool link --compile-if-needed
      then
         fail fail "#7: link failed unexpectedly"
      fi

      [ -e "${vardir}/bin/ishouldnotexist" ] && fail "#7: ishouldnotexist in bin, but should not be"

      log_verbose "----- #5 PASSED -----"
   fi

   log_info "----- ALL PASSED -----"

   cd ..

   rmdir_safer "${directory}"
}



init()
{
   MULLE_ENV="${MULLE_ENV:-${PWD}/../../mulle-env}"
}



init "$@"
main "$@"

