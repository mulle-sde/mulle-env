#! /bin/sh

[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"

###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###
MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions libexec-dir`" || exit 1
export MULLE_BASHFUNCTIONS_LIBEXEC_DIR
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-boot.sh" || exit 1
. "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" || exit 1
###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###   ###


run_mulle_env()
{
   log_fluff "####################################"
   log_fluff ${MULLE_ENV} ${MULLE_ENV_FLAGS} "$@"
   log_fluff "####################################"

   exekutor ${MULLE_ENV} ${MULLE_ENV_FLAGS} "$@"
}



main()
{
   MULLE_ENV_FLAGS="$@"

   _options_mini_main "$@" && set -x

   local directory

   r_make_tmp_directory || exit 1
   directory="${RVAL:-/tmp/exekutor}"

   cd "${directory}" || exit 1

   run_mulle_env -s init --style none/tight

   value="`run_mulle_env environment --me get FOO`"
   if [ ! -z "${value}" ]
   then
      fail "Non empty return value for get"
   fi

   local count
   count=1

   local string
   local value

   for string in ''  'foo with spaces' 'bar with spaces' '"doublequoted"' '"\"escaped\""'
   do
      if ! run_mulle_env environment --me set FOO "${string}"
      then
         fail "Negative return value for set with: ${string}"
      fi
      if ! value="`run_mulle_env environment --me get FOO`"
      then
         fail "Negative return value for get with: ${string}"
      fi
      if [ "${value}" != "${string}" ]
      then
         fail "Wrong return value >${value}< for get with: ${string}"
      fi
      log_verbose "----- #${count} PASSED -----"
      count=$((count + 1))
   done

   log_info "----- ALL PASSED -----"

   cd ..

   rmdir_safer "${directory}"
}



init()
{
   MULLE_ENV="${MULLE_ENV:-${PWD}/../../mulle-env}"
}



init "$@"
main "$@"

