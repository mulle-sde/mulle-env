#! /bin/sh
#
# shellcheck shell=bash
# shellcheck disable=SC2236
# shellcheck disable=SC2166
# shellcheck disable=SC2006

[ "${TRACE}" = 'YES' -o "${MUDO_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

####
#
# Prelude to be placed at top of each script. Rerun this script either in
# bash or zsh, if not already running in either (which can happen!)
# Allows script to run on systems that either have bash (linux) or
# zsh (macOS) only by default.

if [ "${1:-}" != --no-auto-shell ]
then
   if [ -z "${BASH_VERSION}" -a -z "${ZSH_VERSION}" ]
   then
      exe_shell="`command -v "bash" `"
      exe_shell="${exe_shell:-`command -v "zsh" `}"

      script="$0"

      #
      # Quote incoming arguments for shell expansion
      #
      args=""
      for arg in "$@"
      do
         # True bourne sh doesn't know ${a//b/c} and <<<
         case "${arg}" in
            *\'*)
               # Use cat instead of echo to avoid possible echo -n
               # problems. Escape single quotes in string.
               arg="`cat <<EOF | sed -e s/\'/\'\\\"\'\\\"\'/g 
${arg}
EOF
`"
            ;;
         esac
         if [ -z "${args}" ]
         then
            args="'${arg}'"
         else
            args="${args} '${arg}'"
         fi
      done
      
      #
      # bash/zsh will use arg after -c <arg> as $0, convenient!
      #

      exec "${exe_shell:-bash}" -c ". ${script} --no-auto-shell ${args}" "${script}"
   fi
   if [ ! -z "${BASH_VERSION}" ]
   then
      set +o posix
   fi
else
   shift    # get rid of --no-auto-shell
fi


#
# Main script to follow, runs now either in zsh or bash
#
####


if [ $# -eq 0 ]
then
   cat <<EOF >&2
usage:
   mudo [-e|-f] <command> ...

   mudo lets you execute commands with an unrestricted PATH from within a
   mulle-env environment.
   With the -e option you can replace the current environment with the
   unrestricted user environment.
   With the -f option you can run mudo even if there is no current environment
   making mudo basicaly a no-op. This can be useful in scripts.

   See the difference by comparing \`env\` with \`mudo env\` and \`mudo -e env\`.

EOF
   exit 1
fi

if [ -z "${MULLE_VIRTUAL_ROOT}" -o -z "${MULLE_HOSTNAME}" ]
then
   if [ "$1" = "-f" ]
   then
      shift
      exec "$@"
   fi
   echo "error: mudo must be run from within the mulle virtual environment" >&2
   exit 1
fi

# we are in a virtual env, so if -f is given remove it
if [ "$1" = "-f" ]
then
   shift
fi


if [ "$1" != "-e" ]
then
   #
   # does not work with builtins like `command -v ps`
   #
   if [ -z "${MULLE_OLDPATH}" ]
   then
      exec "$@"
   else
      PATH="${MULLE_OLDPATH}" exec "$@"
   fi
   exit $?
fi

# remove -e
shift

# we are in a virtual env, so if -f is given remove it (do it one more time)
if [ "$1" = "-f" ]
then
   shift
fi


# get mulle-env paths into this shell script environment like f.i.:
#
#    MULLE_ENV_VAR_DIR='/Volumes/Source/srcM/mulle-cpp/.mulle/var/walitza/env'
#    MULLE_ENV_ETC_DIR='/Volumes/Source/srcM/mulle-cpp/.mulle/etc/env'
#    MULLE_ENV_SHARE_DIR='/Volumes/Source/srcM/mulle-cpp/.mulle/share/env'
#
eval "`mulle-env --search-as-is mulle-tool-env env`" || exit 1

filename="${MULLE_ENV_VAR_DIR}/old-environment"
environment="`cat "${filename}" 2> /dev/null`"
if [ -z "${environment}" ]
then
   echo "error: mudo did not find previous environment (${filename})" >&2
   exit 1
fi

#
# does not work with builtins like `command -v ps`
#

quote="'"
argv=
for arg in "$@"
do
   arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
   argv="$argv '$arg'"
done

if [ -z "${MULLE_OLDPATH}" ]
then
   eval exec env -i - "${environment}" "${argv}"
else
   PATH="${MULLE_OLDPATH}" eval exec env -i - "${environment}" "${argv}"
fi

