#! /usr/bin/env bash

[ "${TRACE}" = 'YES' -o "${MUDO_TRACE}" = 'YES' ] && set -x && : "$0" "$@"

if [ $# -eq 0 ]
then
   cat <<EOF >&2
usage:
   mudo [-e] <command> ...

   mudo lets you execute commands with an unrestricted PATH from within a
   mulle-env environment.
   With the -e option you can replace the current environment with the
   unrestricted user environment.

   See the difference by comparing \`env\` with \`mudo env\` and \`mudo -e env\`.

EOF
   exit 1
fi

if [ -z "${MULLE_VIRTUAL_ROOT}" -o -z "${MULLE_HOSTNAME}" ]
then
   echo "error: mudo must be run from within the mulle virtual environment" >&2
   exit 1
fi

if [ "$1" != "-e" ]
then
   #
   # does not work with builtins like `command -v ps`
   #
   if [ -z "${MULLE_OLDPATH}" ]
   then
      exec "$@"
   else
      PATH="${MULLE_OLDPATH}" exec "$@"
   fi
   exit $?
fi

shift

eval `mulle-env -N mulle-tool-env env` || exit 1

filename="${MULLE_ENV_VAR_DIR}/old-environment"
environment="`cat "${filename}" 2> /dev/null`"
if [ -z "${environment}" ]
then
   echo "error: mudo did not find previous environment (${filename})" >&2
   exit 1
fi

#
# does not work with builtins like `command -v ps`
#
args=
for arg in "$@"
do
   arg="${arg//${quote}/${quote}\"${quote}\"${quote}}"
   argv="$argv '$arg'"
done

if [ -z "${MULLE_OLDPATH}" ]
then
   eval exec env -i - "${environment}" "${args}"
else
   PATH="${MULLE_OLDPATH}" eval exec env -i - "${environment}" "${args}"
fi

