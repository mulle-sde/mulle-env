#! /usr/bin/env bash
#
#   Copyright (c) 2015 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${7}" = "YES" ] && set -x && : "mulle-env-shell" "$@"


#
# A separate file to that env can call it. there is no error checking or
# log output here
#
emit_initfile()
{
   if [ "${TRACE}" = "YES" ]
   then
      echo "set -x"
   fi
   echo "set +o posix"  # turn back to default

   local envfile

   envfile="${MULLE_VIRTUAL_ROOT}/.mulle-env/etc/${ENVFILENAME}"
   if [ ! -f "${MULLE_VIRTUAL_ROOT}/.mulle-env/etc/${ENVFILENAME}" ]
   then
      envfile="${MULLE_VIRTUAL_ROOT}/.mulle-env/share/${ENVFILENAME}"
   fi
   if [ ! -f "${envfile}" ]
   then
      echo "\"${ENVFILENAME}\" not found, can not continue" >&2
      exit 1
   fi

   if [ "${TRACE}" = "YES" ]
   then
     echo "TRACE=\"${TRACE}\" && . \"${envfile}\""
     echo "unset TRACE"
   else
     echo ". \"${envfile}\""
   fi
   # try to set terminal title
   echo 'printf "\033]0;%s\007"' "'mulle-env ${cmd_string}'"

   if [ "${TRACE}" = "YES" ]
   then
      echo "set +x"
   fi

   if [ "${OPTION_KEEP_TMP}" = "NO" ]
   then
      #
      # run in envelope subshell to squelch job control message
      #
      echo "( ( /bin/sleep 1 ; /bin/rm \"${initfile}\" 2> /dev/null ) &)"
   fi
}


run_shell()
{
   local envname

   envname="`basename -- "${MULLE_VIRTUAL_ROOT}"`"

   local cmd_env
   local cmd_string

   cmd_string="`command -v "bash"`"
   if [ -z "${cmd_string}" ]
   then
      echo "failed to locate bash" >&2
      exit 1
   fi

   local prompt_string
   local initfile

   #
   # Because some environment strings like
   # DYLD_LIBRARY_PATH are stripped off by dyld
   # let's source everything via an init file.
   # check vs bash/dash
   # not sure dash can do this, or does even still exist
   #
   mkdir -p ".mulle-env/var/tmp" 2> /dev/null

   initfile=".mulle-env/var/tmp/`uuidgen`" || exit 1

   emit_initfile > "${initfile}" || exit 1

   #
   # The only way to avoid SYS_BASHRC is to go posix.
   # But --posix doesn't work propely on darwin. But that doesn't have
   # SYS_BASHRC ...
   #
   local cmd_options

   case "${MULLE_UNAME}" in
      darwin)
        cmd_options="--rcfile '${initfile}'"
      ;;

      *)
        cmd_env="ENV='${initfile}'"
        cmd_options="--posix"
      ;;
   esac

   # trying to get aliases back in "wild" is not fruitful portably IMO
   case "${STYLE}" in
      *)
         cmd_options="${cmd_options} --noprofile"
      ;;
   esac

   local args

   args="$1"

   while [ $# -gt 1 ]
   do
      shift

      args="${args} '$1'"
   done
   shift

   eval "MULLE_VIRTUAL_ROOT='${MULLE_VIRTUAL_ROOT}'" \
        "MULLE_SHELL_MODE='${MODE}'" \
        "MULLE_UNAME='${MULLE_UNAME}'" \
        "TRACE='${TRACE}'" \
        "PATH='${RUNPATH}'" \
        "${prompt_string}" \
        "${cmd_env}" \
            "'${cmd_string}'" \
               "${cmd_options}" \
               "${args}"

  if [ "${OPTION_KEEP_TMP}" = "NO" ] && [ -f "${initfile}" ]
  then
      rm "${initfile}"
  fi

  # try to reset
  printf '\033]0;%s\007' ""
}


main()
{
   local OPTION_MAKE_FLAGS="NO"
   local OPTION_INHERIT="NO"
   local OPTION_KEEP_TMP="NO"

   while [ "$#" -ne 0 ]
   do
      case "$1" in
         -m)
            OPTION_MAKE_FLAGS="YES"
         ;;

         -i)
            OPTION_INHERIT="YES"
         ;;

         -k)
            OPTION_KEEP_TMP="YES"
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   local MULLE_UNAME

   MULLE_UNAME="$1"
   [ -z "${MULLE_UNAME}" ] && echo "empty MULLE_UNAME" >&2 && exit 1
   shift

   local MULLE_VIRTUAL_ROOT

   MULLE_VIRTUAL_ROOT="$1"
   [ -z "${MULLE_VIRTUAL_ROOT}" ] && echo "empty MULLE_VIRTUAL_ROOT" >&2 && exit 1
   shift

   local RUNPATH

   RUNPATH="$1"
   [ -z "${RUNPATH}" ] && echo "empty RUNPATH" >&2 && exit 1
   shift

   local MODE  # either SCRIPT or INTERACTIVE

   MODE="$1"
   [ -z "${MODE}" ] && echo "empty MODE" >&2 && exit 1
   shift

   local STYLE  # wild or else

   STYLE="$1"
   [ -z "${STYLE}" ] && echo "empty STYLE" >&2 && exit 1
   shift

   local ENVFILENAME  # environment.sh or so

   ENVFILENAME="$1"
   [ -z "${ENVFILENAME}" ] && echo "empty ENVFILENAME" >&2 && exit 1
   shift

   local TRACE  # either YES or usually empty

   TRACE="$1"
   shift

   run_shell "$@"
}


main "$@"
