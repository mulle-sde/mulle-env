#! /usr/bin/env bash
#
#   Copyright (c) 2015 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${4}" = "YES" ] && set -x && : mulle-env-shell


# a separate file to that env can call it. there is no error checking or
# log output here

run_shell()
{
   local envname

   envname="`basename -- "${MULLE_VIRTUAL_ROOT}"`"

   local env_string
   local cmd_string
   local cmd_options

   cmd_string="`command -v "bash"`"
   if [ -z "${cmd_string}" ]
   then
      echo "failed to locate bash" >&2
      exit 1
   fi

   local prompt_string
   local initfile

   #
   # Because some environment strings like
   # DYLD_LIBRARY_PATH are stripped off by dyld
   # let's source everything via an init file.
   # check vs bash/dash
   # not sure dash can do this, or does even still exist
   #
   case "${cmd_string}" in
      *ash)
         initfile=".mulle-env.tmp.`uuidgen`" || exit 1

         if [ "${TRACE}" = "YES" ]
         then
            echo "set -x" > "${initfile}"
         else
            echo "# " > "${initfile}"
         fi

         echo "${env_string}" >> "${initfile}"
         echo "[ -f \"${MULLE_VIRTUAL_ROOT}/.mulle-env/environment.sh\" ] && \
TRACE=\"${TRACE}\" && \
. \"${MULLE_VIRTUAL_ROOT}/.mulle-env/environment.sh\"" >> "${initfile}"
         # try to set terminal title
         echo 'printf "\033]0;%s\007"' "'mulle-env ${cmd_string}'"  >> "${initfile}"

         if [ "${TRACE}" = "YES" ]
         then
            echo "set +x" >> "${initfile}"
         fi

         if [ "${OPTION_KEEP_TMP}" = "NO" ]
         then
            # run in envelope subshell to squelch job control message
            # remove all f
            echo "( ( /bin/sleep 1 ; /bin/rm \"${initfile}\" 2> /dev/null ) &)" >> "${initfile}"
         fi

         # specifying --norc disables --rcfile
         cmd_options="--rcfile '${initfile}' --noprofile"
      ;;
   esac

   case "${cmd_string}" in
      *ash)
         case "${PS1}" in
            *\\h[*)
               prompt_string="PS1='${PS1}'"
            ;;

            *\\h*)
               prompt_string="PS1='$(sed "s/\\\\h/\\\\h\\[${envname}\\]/" <<< "${PS1}")"
            ;;

            *)
               prompt_string="PS1='\u@\h[${envname}] \W$ '"
            ;;
         esac
      ;;
   esac

   local args

   args="$1"

   while [ $# -gt 1 ]
   do
      shift

      args="${args} '$1'"
   done
   shift

   eval "MULLE_VIRTUAL_ROOT='${MULLE_VIRTUAL_ROOT}'" \
        "MULLE_SHELL_MODE='${MODE}'" \
        "TRACE='${TRACE}'" \
        "PATH='${RUNPATH}'" \
        "${env_string}" \
        "${prompt_string}" \
            "'${cmd_string}'" \
               "${cmd_options}" \
               "${args}"

  if [ "${OPTION_KEEP_TMP}" = "NO" ] && [ -f "${initfile}" ]
  then
      rm "${initfile}"
  fi

  # try to reset
  printf '\033]0;%s\007' ""
}


main()
{
   local OPTION_MAKE_FLAGS="NO"
   local OPTION_INHERIT="NO"
   local OPTION_KEEP_TMP="NO"

   while [ "$#" -ne 0 ]
   do
      case "$1" in
         -m)
            OPTION_MAKE_FLAGS="YES"
         ;;

         -i)
            OPTION_INHERIT="YES"
         ;;

         -k)
            OPTION_KEEP_TMP="YES"
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   local MULLE_VIRTUAL_ROOT

   MULLE_VIRTUAL_ROOT="$1"
   [ -z "${MULLE_VIRTUAL_ROOT}" ] && echo  "empty RUNPATH" >&2 && exit 1
   shift

   local RUNPATH

   RUNPATH="$1"
   [ -z "${RUNPATH}" ] && echo  "empty RUNPATH" >&2 && exit 1
   shift

   local MODE  # either SCRIPT or INTERACTIVE

   MODE="$1"
   [ -z "${MODE}" ] && echo  "empty MODE" >&2 && exit 1
   shift

   local TRACE  # either YES or usually empty

   TRACE="$1"
   shift

   run_shell "$@"
}


main "$@"
