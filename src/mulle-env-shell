#! /usr/bin/env bash
#
#   Copyright (c) 2015 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${7}" = 'YES' ] && set -x && : "mulle-env-shell" "$@"


_fail()
{
   printf "%s\n" "$*" >&2
   exit 255
}


#
# mktemp is really slow sometimes, so we prefer uuidgen
#
r_make_tmp_in_dir()
{
   local tmpdir="$1"
   local name="$2"
   local filetype="$3"

   RVAL=""

   [ ! -d "${tmpdir}" ] && _fail "${tmpdir} does not exist"

   name="${name:-${MULLE_EXECUTABLE_NAME}}"
   name="${name:-mulle}"

   local UUIDGEN

   UUIDGEN="`command -v "uuidgen"`"
   if [ -z "${UUIDGEN}" ]
   then
      case "${filetype}" in
         *d*)
            TMPDIR="${tmpdir}" mktemp -d "${name}-XXXXXXXX"
            return $?
         ;;

         *)
            TMPDIR="${tmpdir}" mktemp "${name}-XXXXXXXX"
            return $?
         ;;
      esac
   fi

   local filename
   local prev

   while :
   do
      prev="${filename}"
      filename="${tmpdir}/${name}-`"${UUIDGEN}"`"

      if [ "${prev}" = "${filename}" ]
      then
         _fail "uuidgen malfunction"
      fi

      case "${filetype}" in
         *d*)
            mkdir "${filename}" || exit 1
            RVAL="${filename}"
            return 0
         ;;

         *)
            touch "${filename}" || exit 1
            RVAL="${filename}"
            return 0
         ;;
      esac
   done
}


r_get_envfile()
{
   RVAL="${MULLE_VIRTUAL_ROOT}/.mulle/etc/env/${ENVFILENAME}"
   if [ ! -f "${MULLE_VIRTUAL_ROOT}/.mulle/etc/env/${ENVFILENAME}" ]
   then
      RVAL="${MULLE_VIRTUAL_ROOT}/.mulle/share/env/${ENVFILENAME}"
   fi
   if [ ! -f "${RVAL}" ]
   then
      _fail "\"${RVAL}\" not found, can not continue"
   fi
}


#
# A separate file to that env can call it. there is no error checking or
# log output here
#
emit_initfile()
{
   if [ "${TRACE}" = 'YES' ]
   then
      echo "set -x"
   fi
   echo "set +o posix"  # turn back to default

   local envfile
   r_get_envfile
   envfile="${RVAL}"

   if [ "${TRACE}" = 'YES' ]
   then
     echo "TRACE=\"${TRACE}\" && . \"${envfile}\""
   else
     echo ". \"${envfile}\""
   fi

   # try to set terminal title
   echo 'printf "\033]0;%s\007"' "'mulle-env ${cmd_string}'"

   if [ "${TRACE}" = 'YES' ]
   then
      echo "set +x"
   fi
   echo "unset TRACE"

   if [ "${OPTION_KEEP_TMP}" = 'NO' ]
   then
      #
      # run in envelope subshell to squelch job control message
      #
      echo "( ( /bin/sleep 1 ; /bin/rm \"${initfile}\" 2> /dev/null ) &)"
   fi
}


run_script_shell()
{
   local args
   local envfile
   r_get_envfile
   envfile="${RVAL}"

   #
   # For script this is somewhat easy. We emit
   # . ${envfile} || exit 1 ; ${command}
   #
   printf -v args "%q" ". \"${envfile}\" || exit 1 ; $1"

   eval "MULLE_ENV_LIBEXEC_DIR='${MULLE_ENV_LIBEXEC_DIR}'" \
        "MULLE_HOSTNAME='${MULLE_HOSTNAME}'" \
        "MULLE_SHELL_MODE='${MODE}'" \
        "MULLE_UNAME='${MULLE_UNAME}'" \
	     "MULLE_VIRTUAL_ROOT='${MULLE_VIRTUAL_ROOT}'" \
        "NO_MOTD='YES'" \
        "PATH='${RUNPATH}'" \
        "TRACE='${TRACE}'" \
            "'${BASH}'" -c "${args}"
}



run_interactive_shell()
{
   #
   # Because some environment strings like
   # DYLD_LIBRARY_PATH are stripped off by dyld
   # let's source everything via an init file.
   # check vs bash/dash
   # not sure dash can do this, or does even still exist
   #
   local tmpdir

   tmpdir="${MULLE_ENV_HOST_VAR_DIR}/tmp"

   mkdir -p "${tmpdir}" 2> /dev/null


   local initfile

   if ! r_make_tmp_in_dir "${tmpdir}"
   then
      _fail "Temporary initfile creation failed"
   fi
   initfile="${RVAL}"

   if ! emit_initfile > "${initfile}"
   then
      _fail "Could not write \"${initfile}\""
   fi

   # The only way to avoid SYS_BASHRC is to go posix.
   # But --posix doesn't work propely on darwin. But that doesn't have
   # SYS_BASHRC ...
   #
   local cmd_env
   local cmd_options

   case "${MULLE_UNAME}" in
      darwin)
        cmd_options="--rcfile '${initfile}'"
      ;;

      *)
        cmd_env="ENV='${initfile}'"
        cmd_options="--posix"
      ;;
   esac

   # trying to get aliases back portably in "wild" is not fruitful  IMO
   case "${STYLE}" in
      *)
         cmd_options="${cmd_options} --noprofile"
      ;;
   esac

   local rval

   eval "MULLE_ENV_LIBEXEC_DIR='${MULLE_ENV_LIBEXEC_DIR}'" \
        "MULLE_HOSTNAME='${MULLE_HOSTNAME}'" \
        "MULLE_SHELL_MODE='${MODE}'" \
        "MULLE_UNAME='${MULLE_UNAME}'" \
	     "MULLE_VIRTUAL_ROOT='${MULLE_VIRTUAL_ROOT}'" \
        "NO_MOTD='${NO_MOTD}'" \
        "PATH='${RUNPATH}'" \
        "TRACE='${TRACE}'" \
        "${cmd_env}" \
            "'${BASH}'" \
               "${cmd_options}"

   rval=$?

   if [ "${OPTION_KEEP_TMP}" = 'NO' ]
   then
      ( rm "${initfile}" 2> /dev/null )
   fi

   printf '\033]0;%s\007' ""  # try to reset colors

   return ${rval}
}


main()
{
   local OPTION_MAKE_FLAGS='NO'
   local OPTION_INHERIT='NO'
   local OPTION_KEEP_TMP='NO'

   while [ "$#" -ne 0 ]
   do
      case "$1" in
         -m)
            OPTION_MAKE_FLAGS='YES'
         ;;

         -i)
            OPTION_INHERIT='YES'
         ;;

         -k)
            OPTION_KEEP_TMP='YES'
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   [ $# -lt 10 -o $# -gt 11 ] && _fail "API mismatch ($# args: $*)"

   local MULLE_UNAME

   MULLE_UNAME="$1"
   [ -z "${MULLE_UNAME}" ] && _fail "empty MULLE_UNAME"
   shift

   local MULLE_HOSTNAME

   MULLE_HOSTNAME="$1"     # hostname empty ? we don't care
   shift

   local MULLE_VIRTUAL_ROOT

   MULLE_VIRTUAL_ROOT="$1"
   [ -z "${MULLE_VIRTUAL_ROOT}" ] && _fail "empty MULLE_VIRTUAL_ROOT"
   shift


   local MULLE_ENV_HOST_VAR_DIR

   MULLE_ENV_HOST_VAR_DIR="$1"
   [ -z "${MULLE_ENV_HOST_VAR_DIR}" ] && _fail "empty MULLE_ENV_HOST_VAR_DIR"
   shift

   local RUNPATH

   RUNPATH="$1"
   [ -z "${RUNPATH}" ] && _fail "empty RUNPATH"
   shift

   local MODE  # either SCRIPT or INTERACTIVE

   MODE="$1"
   [ -z "${MODE}" ] && _fail "empty MODE"
   shift

   local STYLE  # wild or else

   STYLE="$1"
   [ -z "${STYLE}" ] && _fail "empty STYLE"
   shift

   local ENVFILENAME  # environment.sh or so

   ENVFILENAME="$1"
   [ -z "${ENVFILENAME}" ] && _fail "empty ENVFILENAME"
   shift

   local TRACE  # either YES or usually empty

   TRACE="$1"
   shift

   local NO_MOTD  # either YES or usually empty

   NO_MOTD="$1"
   shift

   local MULLE_ENV_LIBEXEC_DIR

   MULLE_ENV_LIBEXEC_DIR="`dirname -- "$0"`"

   #
   # Clean some environment variables set by
   # mulle-bashfunctions
   #
   local BASH

   BASH="`command -v "bash"`"
   if [ -z "${BASH}" ]
   then
      _fail "failed to locate bash"
   fi

   # remainder is "command" for SCRIPT
   case "${MODE}" in
      *INTERACTIVE*)
         run_interactive_shell
      ;;

      *)
         run_script_shell "$1"  # it's a command string
      ;;
   esac
}


main "$@"
