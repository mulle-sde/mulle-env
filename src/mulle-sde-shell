#! /usr/bin/env bash
#
#   Copyright (c) 2015 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
if [ "${TRACE}" = "YES" ]
then
   set -x
fi

# a separate file to that env can call it. there is no error checking or
# log output here

run_shell()
{
   #
   # could pimp this up with CPPFLAGS and LDFLAGS too
   # but do I want this ?
   #
   local options

   options="run"
   if [ "${OPTION_MAKE_FLAGS}" = "YES" ]
   then
      options="${options} make"
   fi

   local pathoptions

   if [ "${OPTION_INHERIT}" = "NO" ]
   then
      pathoptions="-ni"
   fi

   local envname

   envname="`basename -- "${MULLE_SDE_VIRTUAL_ROOT}"`"

   local path
   local name
   local env_string
   local cmd_string
   local cmd_options

   if [ -d ".mulle-build" ]
   then
#      path="`mulle-bootstrap master-path`" || return 1

      env_string="`mulle-build paths ${pathoptions} -m -1 -q "'" ${options}`" || return 1
   else
      :
#      path="`pwd -P`"
   fi

#   name="`basename -- "${path}"`"
   cmd_string="${SHELL:-/usr/bin/env bash}"

   local prompt_string
   local initfile

   #
   # because some environment strings like
   # DYLD_LIBRARY_PATH are stripped off by dyld (I guess)
   # put everything in an init file if possible
   #
   case "${cmd_string}" in
      *bash|*dash)
         initfile=".environment.`uuidgen`" || exit 1
         echo "${env_string}" > "${initfile}"
         echo "[ -f \"${MULLE_SDE_VIRTUAL_ROOT}/.mulle-sde-environment.sh\" ] && \
. \"${MULLE_SDE_VIRTUAL_ROOT}/.mulle-sde-environment.sh\"" >> "${initfile}"
         # try to set terminal title
         echo 'printf "\033]0;%s\007"' "'mulle-sde ${cmd_string}'"  >> "${initfile}"

         if [ "${OPTION_KEEP_TMP}" = "NO" ]
         then
            echo "( sleep 1 ; rm \"${initfile}\" 2> /dev/null ) &" >> "${initfile}"
         fi

         cmd_options="--rcfile '${initfile}'"
      ;;
   esac

   case "${cmd_string}" in
      *bash|*dash)
         case "${PS1}" in
            *\\h[*)
               prompt_string="PS1='${PS1}'"
            ;;

            *\\h*)
               prompt_string="PS1='$(sed "s/\\\\h/\\\\h\\[${envname}\\]/" <<< "${PS1}")"
            ;;

            *)
               prompt_string="PS1='\u@\h[${envname}] \W$ '"
            ;;
         esac
      ;;
   esac

   local args

   args="$1"

   while [ $# -gt 1 ]
   do
      shift

      args="${args} '$1'"
   done
   shift

   eval "MULLE_SDE_VIRTUAL_ROOT='${MULLE_SDE_VIRTUAL_ROOT}'" \
        "${env_string}" \
        "${prompt_string}" \
            "'${cmd_string}'" \
               "${cmd_options}" \
               "${args}"

  if [ "${OPTION_KEEP_TMP}" = "NO" ] && [ -f "${initfile}" ]
  then
      rm "${initfile}"
  fi

  # try to reset
  printf '\033]0;%s\007' ""
}


main()
{
   local OPTION_MAKE_FLAGS="NO"
   local OPTION_INHERIT="NO"
   local OPTION_KEEP_TMP="NO"

   while [ "$#" -ne 0 ]
   do
      case "$1" in
         -m)
            OPTION_MAKE_FLAGS="YES"
         ;;

         -i)
            OPTION_INHERIT="YES"
         ;;

         -k)
            OPTION_KEEP_TMP="YES"
         ;;

         *)
            break
         ;;
      esac
      shift
   done

   local MULLE_SDE_VIRTUAL_ROOT

   MULLE_SDE_VIRTUAL_ROOT="$1"
   shift

   run_shell "$@"
}


main "$@"
